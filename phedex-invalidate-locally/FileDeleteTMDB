#!/usr/bin/env perl

##H Delete files from TMDB
##H
##H Usage:
##H   FileDeleteTMDB -db DBCONFIG -list FILES (-node NODENAME | -invalidate) [ -bulk ] [ -keepempty CONTAINERS ]
##H
##H Examples:
##H
##H   FileDeleteTMDB -db <path>/DBConfig:Dev/Admin
##H                  -list <path>/lfns_to_delete.txt
##H                  -node T1_FNAL_Buffer, T1_CNAF_Buffer
##H
##H   FILES      is either a ASCII file containing a list of LFNs/blocks/datasets
##H              to remove or a comma separated list of LFNs/blocks/datasets.
##H              Wildcard '%' is supported.
##H              The syntax is:
##H                lfn:<LFN> for an LFN
##H                block:<BLOCK> for all files in a block
##H                dataset:<DATASET> for all files in a dataset
##H
##H   NODENAMES  is a comma separated list of nodes for which you wish to delete
##H              files.  Wildcard '%' is supported too.
##H              
##H   CONTAINERS  a comma separated list of containers to keep even if they are empty.
##H               'dataset' and 'block' are supported.  This is useful to maintain 
##H               subscriptions if the containers are going to be refilled later.
##H               Note that '-keepempty block' is incompatible with '-bulk'
##H
##H   SWITCHES
##H   -invalidate   removes replicas from all nodes and then removes the LFNs
##H                 from TMDB completely
##H         -bulk   bulk deletion for blocks and datasets.  This is a faster
##H                 method of deletion if the number of files is huge, but
##H                 to use this method you may only specify 'dataset:' or
##H                 'block:' identifiers in -list and you must be invalidating
##H                 the files (-invalidate)
##H            -h   invoke this help text

use warnings;
use strict;
$|++;

# Process command line arguments.
use Getopt::Long;
use PHEDEX::Core::Help;
use PHEDEX::Core::DB;
use PHEDEX::Core::Timing;

my %args;
&GetOptions ("db=s"        => \$args{DBCONFIG},
	     "list=s"      => \$args{LIST},
	     "nodes=s"     => \$args{NODES},
	     "invalidate"  => \$args{INVALIDATE},
	     "bulk"        => \$args{BULK},
	     "keepempty=s" => \$args{KEEP},
             "help|h"      => sub { &usage() });
# Check arguments.
if (!$args{DBCONFIG} || !$args{LIST} || ! ($args{NODES} || $args{INVALIDATE}))
{
    die "Insufficient parameters, use -h for help.\n";
}

if ($args{KEEP}) {
    foreach my $k (split(m|,\s*|, $args{KEEP})) {
	die "Invalid argument to -keepempty.  Accepts 'dataset' and/or 'block'\n"
	    unless $k =~ /^(dataset|block)$/;
    }
}

my $self = { DBCONFIG => $args{DBCONFIG} };
our $dbh = &connectToDatabase ($self);
my $now = &mytimeofday();
my $nodes = $args{NODES} ? [ split m|,\s*|, $args{NODES} ] : [];
my $list = [ split m|,\s*|, $args{LIST} ];
our $keep = { map { $_ => 1 } split(m|,\s*|, $args{KEEP}) } if $args{KEEP};
our $do_bulk = $args{BULK} ? 1 : 0;
our $do_invalidate = $args{INVALIDATE} ? 1 : 0;
my $tables = &setTableList ($nodes);

if ($$keep{block} && $do_bulk) {
    die "ERROR: Empty blocks cannot be kept when using bulk deletion mode.\n";
}

if ($do_bulk && !$do_invalidate) {
    die "ERROR: Bulk deletion only works when invalidating files\n";
}

if (@$nodes && $do_invalidate) {
    die "ERROR: deletion of files at nodes (replicas) and file invalidation are ",
    "mutually exclusive.  Please choose only one of the options -node ",
    "or -invalidate\n";
}

# Get a list of LFNs from the input provided by the user
# finally delete the LFNs
my $containers = &getItemList( $list, 'containers' );
my $stats;
if (! $do_bulk ) {
    my $lfns = &getItemList ( $list, 'files' );
    $stats = &deleteLFNs ( $lfns, $dbh, $nodes, $tables ) if %$lfns;
} else {
    my $blocks = &getItemList ( $list, 'blocks' );
    $stats = &bulkDelete ( $blocks, $dbh ) if %$blocks;
}

# check for empty containers, which are not caught above
my ($con_ds, $con_b) = ([], []);
foreach my $con ( values %$containers ) {
    push @$con_ds, $$con{DATASET} if $$con{DATASET};
    push @$con_b,  $$con{BLOCK}   if $$con{BLOCK};
}
my ($del_ds, $del_b) = &deleteEmptyContainers( $con_ds, $con_b );
$$stats{DEL_DATASETS} += $del_ds;
$$stats{DEL_BLOCKS} += $del_b;

$dbh->commit();
&disconnectFromDatabase($self, $dbh, 1);

print "\nfinished deletion\n";

&printStats( $stats );

exit 0;



# Define the tables to delete based on whether files are being
# invalidated or not
sub setTableList
{
    my @tables = ();

    if ( $do_invalidate )
    {
	@tables = ('t_xfer_task',
		   't_xfer_replica',
		   't_xfer_request',
		   't_xfer_path',
		   't_xfer_file',
		   't_dps_file');
    }
    else
    {
	@tables = ('t_xfer_task',
		   't_xfer_replica',
		   't_xfer_path');
    }    
    return \@tables;
}

# Returns a hash of the form:
# $$result{$lfn} = {LFN => $lfn, ID => $id, DATASET => $dataset, BLOCK => $block} if $wants eq 'files'
# or $$result{$block} = {ID => $id, DATASET => $dataset, BLOCK => $block} eq 'blocks'
sub getItemList
{
    my ( $files, $wants ) = @_;
    my $fileref = [];

    if ( -e ${$files}[0] )
    {
	my @FileList = ();
	open(IFILE, '<', "${$files}[0]") or die "Could not open ${$files}[0]";
	while (<IFILE>)
	{
	    chomp $_;
	    push ( @FileList,  $_ ) if (length $_ > 0);
	}
	$fileref = \@FileList;
    }
    else
    {
	$fileref = [ @$files ]; # copy
    }

    my $results = {}; # unique results
    foreach my $f (@$fileref) {
	my $userstring = $f;
	$f =~ s/^\s*(\S+)\s*$/$1/; # remove whitespace
	$f =~ s/^([^:]+:)//;
	my $item = $1;
	unless ($item && grep $item eq $_, qw(dataset: block: lfn:))
	{
	    print "Unknown data type '$item' for item $f\n";
	    print "Please use one of the following data types for each item:\n";
	    print "lfn: for LFNs\n";
	    print "block: for whole blocks\n";
	    print "dataset: for whole datasets\n";
	    next;
	}
	my $inforef = {};
	if    ($wants eq 'files')  { $inforef = &getLFNInfo  ($item, $f); }
	elsif ($wants eq 'blocks') { $inforef = &getBlockInfo($item, $f); }
	elsif ($wants eq 'containers') { $inforef = &getContainerInfo($item, $f) }
	else { die "unknown return format $wants\n"; }

	unless (keys %$inforef) {
	    print "$wants for $userstring were not found in TMDB, skipping deletion of $wants\n";
	    next;
	}
	map { $$results{$_} = $$inforef{$_} } keys %$inforef;
    }
    return ($results);
}

sub getLFNInfo
{
    my ( $level, $item ) = @_;
    my $where;
    if    ($level eq 'dataset:')  { $where = "ds.name"; }
    elsif ($level eq 'block:') { $where = "b.name"; }
    elsif ($level eq 'lfn:')   { $where = "f.logical_name"; }
    else { die "Unknown level '$level' to getLFNInfo\n"; }

    if ( $item =~ m|%| ) { escapeSQLLike ($item);
			   $where .= " like :item escape'\\' "; }
    else                 { $where .= " = :item"; }
    
    my $q = &dbexec($dbh, qq{
	select ds.name dataset, b.name block, f.logical_name lfn, f.id
	    from t_dps_dataset ds
	    join t_dps_block b on b.dataset = ds.id
	    join t_dps_file f on f.inblock = b.id
	    where $where},
		    ":item" => $item);
    my $lfns = $q->fetchall_hashref('LFN');
    return $lfns;
}

sub getBlockInfo
{
    my ( $level, $item ) = @_;
    my $where;
    if    ($level eq 'dataset:')  { $where = "ds.name"; }
    elsif ($level eq 'block:') { $where = "b.name"; }
    elsif ($level eq 'lfn:') {
	die "Bulk deletion by LFN is not supported, see -h for help\n";
    } else { die "Unknown level '$level' to getBlockInfo\n"; }

    if ( $item =~ m|%| ) { escapeSQLLike ($item);
			   $where .= " like :item escape'\\' "; }
    else                 { $where .= " = :item"; }
    
    my $q = &dbexec($dbh, qq{
	select ds.name dataset, b.name block, b.id
	    from t_dps_dataset ds
	    join t_dps_block b on b.dataset = ds.id
	    where $where},
		    ":item" => $item);
    my $blocks = $q->fetchall_hashref('BLOCK');
    return $blocks;
}

sub getContainerInfo
{
    my ( $level, $item ) = @_;
    my $where;
    if    ($level eq 'dataset:')  { $where = "ds.name"; }
    elsif ($level eq 'block:') { $where = "b.name"; }
    elsif ($level eq 'lfn:')   { $where = "f.logical_name"; }
    else { die "Unknown level '$level' to getContainerInfo\n"; }

    if ( $item =~ m|%| ) { escapeSQLLike ($item);
			   $where .= " like :item escape'\\' "; }
    else                 { $where .= " = :item"; }
    
    my $q = &dbexec($dbh, qq{
	select distinct 
            ds.id || ':' || b.id id, 
	    ds.name dataset, b.name block
	    from t_dps_dataset ds
	    left join t_dps_block b on b.dataset = ds.id
	    left join t_dps_file f on f.inblock = b.id
	    where $where
	},
		    ":item" => $item);
    my $conts = $q->fetchall_hashref('ID');
    return $conts;
}

# Deletes LFNs from TMDB
sub deleteLFNs
{
    my ( $lfns, $dbh, $nodenames, $tables, $prevstats ) = @_;
    my $stats = $prevstats || { DEL_DB => undef, SKIPPED => undef,
				LFNS_PROCESSED => 0, DEL_DB_SUM => 0,
				DEL_DATASETS => 0, DEL_BLOCKS => 0 };

    my $nodes = &getNodeID ($nodenames);
    my (%datasets, %blocks);
    my $wait_cache = {};  # Cache of LFNs we are going to wait and try again later
    our $wait_start = 0;

    # utility function for scheduling an LFN for later deletion
    sub tryLater 
    {
	my $lfn = shift;
	print "Waiting to retry file in collapsed block with LFN: $lfn\n";
	$wait_start = &mytimeofday() unless $wait_start;
    }

    LFN: foreach my $lfninfo ( values %$lfns )
    {
	$$stats{LFNS_PROCESSED} += 1;

	if ( $do_invalidate ) {
	    if ( &blockIsCollapsed( $$lfninfo{BLOCK} ) ) {
		&expandAndCacheLFN( $lfninfo, $wait_cache );
		&tryLater( $$lfninfo{LFN} );
		next LFN;
	    } else {
		# Lock and Delete
		&lockFileTables ($tables, $$lfninfo{ID});
		&deleteAllTMDBEntries ($$lfninfo{ID}, $$lfninfo{LFN}, $tables);
		$$stats{DEL_DB}{'all'} += 1;
		$$stats{DEL_DB_SUM} += 1;
	    }
	} else {
	    # now at node level check for file existence and start purging those tables
	  NODE: foreach my $nodename ( keys %$nodes )
	  {
	      my ($exists, $collapsed) = &checkReplicaExistence ($lfninfo, $$nodes{$nodename});
	      if ( !$exists )
	      {
		  print "Skipping at node $nodename non-existent file with LFN: $$lfninfo{LFN}\n";
		  $$stats{SKIPPED}{$nodename} += 1;
		  next NODE;
	      } 
	      elsif ( $exists && $collapsed )
	      {
		  &expandAndCacheLFN( $lfninfo, $wait_cache );
		  &tryLater( $$lfninfo{LFN} );
		  next LFN;
	      }
	 
	      # Lock and Delete
	      &lockFileTables ($tables, $$lfninfo{ID});
	      &deleteSiteTMDBEntries ($$lfninfo{ID}, $$lfninfo{LFN},
				      $$nodes{$nodename}, $nodename, $tables);
	      
	      $$stats{DEL_DB}{$nodename} += 1;
	      $$stats{DEL_DB_SUM} += 1;
	  }
	}

	# Record the dataset and block
	$datasets{$$lfninfo{DATASET}} = 1;
	$blocks{$$lfninfo{BLOCK}} = 1;

	# After deleting some files commit and take a brief rest to
	# give other agents a chance to do something
	if ( $$stats{DEL_DB_SUM} && ($$stats{DEL_DB_SUM} % 100) == 0 ) {
	    $dbh->commit();
	    sleep 3;
	}
    }

    if ( $do_invalidate ) {
	# Delete empty datasets and blocks if we were invalidating files
	($$stats{DEL_DATASETS}, $$stats{DEL_BLOCKS}) = &deleteEmptyContainers ( [keys %datasets], [keys %blocks] );
    }

    # Commit any remaining transaction
    $dbh->commit();

    # If we need to wait for some block expansion, commit, wait, and then recurse
    if (keys %$wait_cache) {
	my $n_waiting = scalar keys %$wait_cache;
	my $now = &mytimeofday();
	my $t_wait_min = 15 - int( ($now - $wait_start)/60);
	$t_wait_min = 1 if $t_wait_min < 0;

	print 
	    "\n$n_waiting LFNs were in collapsed blocks.\n",
	    "Waiting $t_wait_min minutes before retrying deletion...\n",
	    "Summary so far:\n";
	&printStats($stats);
	print "\nIf you wish, you may abort with ctl-c and retry manually later.\n";
		
	sleep 60*$t_wait_min; # zzz
	&deleteLFNs($wait_cache, $dbh, $nodenames, $tables, $stats);
    }

    return $stats;
}

# Bulk deletes entire blocks and datasets from the DB
sub bulkDelete
{
    my ( $blocks, $dbh ) = @_;
    my $n_blocks = scalar keys %$blocks;
    
    return unless $n_blocks;
   
    my $stats =  { DEL_DB_SUM => 0, DEL_DATASETS => 0, DEL_BLOCKS => 0 };

    my $locktables = [qw(t_dps_block
			 t_xfer_task
			 t_xfer_replica
			 t_xfer_request
			 t_xfer_path
			 t_xfer_file
			 t_dps_file)];

    print "Starting bulk deletion for $n_blocks blocks...\n";

    # Lock the tables
    &lockTables( $locktables );
    
    my ($sth, $n);
    my $n_commit = 0;
    my %datasets;
    foreach my $blockinfo (values %$blocks) {
	$datasets{$$blockinfo{DATASET}} = 1;
	# Delete from tables by fileid and FKed to t_xfer_file
	foreach my $table qw(t_xfer_task t_xfer_replica t_xfer_request t_xfer_path) {
	    ($sth, $n) = &dbexec($dbh, qq{
		delete from $table where fileid in 
		    (select id from t_xfer_file where inblock = :block) },
		    ":block" => $$blockinfo{ID});
	    $n_commit += $n;
	}

	# Delete from file tables by "inblock"
	foreach my $table qw(t_xfer_file t_dps_file) {
	    ($sth, $n) = &dbexec($dbh, qq{ delete from $table where inblock = :block },
				 ":block" => $$blockinfo{ID});
	    $n_commit += $n;
	    $$stats{DEL_DB_SUM} += $n if $table eq 't_dps_file';
	}

	# Delete the blocks
	($sth, $n) = &dbexec($dbh, qq{ delete from t_dps_block where id = :block }, ":block" => $$blockinfo{ID});
	$n_commit += $n;
	$$stats{DEL_BLOCKS} += $n;

	print "deleted block $$blockinfo{BLOCK}\n";

	# Commit and lock again if we've deleted over a million rows
	if ($n_commit > 1_000_000) {
	    $dbh->commit();
	    $n_commit = 0;
	    &lockTables( $locktables );
	}
    }

    # Delete empty datasets
    ($$stats{DEL_DATASETS}) = &deleteEmptyContainers ( [keys %datasets] );

    return $stats;
}

# Check that the file is actually at that node and make sure that
# the block wasn't collapsed. Re-expand it in this case and cache
# the LFN to attempt to delete later
#
# Returns two falues (exists, is_collapsed)
sub checkReplicaExistence
{
    my ( $lfninfo, $node, $cache ) = @_;
    
    my $q = &dbexec($dbh, qq{
	    select b.files, br.node_files, br.is_active
              from t_dps_block_replica br 
              left join t_dps_block b
		on br.block = b.id
             where node = :node 
               and block in (select inblock from t_dps_file where logical_name = :lfn)},
		     ":node" => $node, ":lfn" => $$lfninfo{LFN});
    my ( $block_files, $node_files, $is_active ) = $q->fetchrow();
    print $lfninfo->{LFN},": block-files is undefined\n" unless defined $block_files;
    print $lfninfo->{LFN},": node-files is undefined\n" unless defined $node_files;

    $q = &dbexec($dbh, qq{
	    select count(*) from t_xfer_replica 
             where fileid = :lfn and node = :node},
		     ":lfn" => $$lfninfo{ID}, ":node" => $node);
    my ( $exists_xfer_rep ) = $q->fetchrow();
	
    if ( !$exists_xfer_rep && !($block_files == $node_files  && $is_active eq 'n') )
    {
	return (0, undef); # return false, since file is not at node
    }
    elsif ( !$exists_xfer_rep && ($block_files == $node_files && $is_active eq 'n') )
    {
	return (1, 1); # file is at node in collapsed block
    }

    return (1, 0); # return true otherwise
}

# check if a block is collapsed
sub blockIsCollapsed
{
    my ( $block ) = @_;
    my $q = &dbexec($dbh, qq{
       select 1 from t_dps_block_replica br 
         join t_dps_block b on b.id = br.block
        where b.name = :block
          and br.is_active = 'n'
    }, ':block' => $block);
    my ( $block_is_collapsed ) = $q->fetchrow();
    return $block_is_collapsed ? 1 : 0;
}

# cache an LFN and trigger its expansion
sub expandAndCacheLFN
{
    my ( $lfninfo, $cache ) = @_;
    &expandBlock ($$lfninfo{BLOCK});
    $$cache{$$lfninfo{LFN}} = $lfninfo;
}

# We need the same node ID very often - get it here
sub getNodeID
{
    my ( $nodenames ) = @_;
    my $node = {};
    
    foreach my $nodename (@$nodenames)
    {
	my $q = undef;
	if ( $nodename =~ m|%| )
	{
	    $q = &dbexec($dbh, qq{
		select name, id from t_adm_node where name like :nodename},
			    ":nodename" => $nodename);
	}
	else
	{
	    $q = &dbexec($dbh, qq{
		select name, id from t_adm_node where name = :nodename},
			    ":nodename" => $nodename);
	}
	map {$$node{$$_[0]} = $$_[1]} @{$q->fetchall_arrayref()};
    }
    return $node;
}

# Lock rows in the tables we are about to modify
sub lockFileTables
{
    my ( $tablesref, $lfn ) = @_;

    foreach my $table ( @$tablesref )
    {
	if ( $table eq 't_xfer_file' || $table eq 't_dps_file' )
	{
	    &dbexec($dbh, qq{
		select *  from $table where id = :lfn for update},
		    ":lfn" => $lfn);
	}
	else
	{
	    &dbexec($dbh, qq{
		select * from $table where fileid = :lfn for update},
		    ":lfn" => $lfn);
	}
    }
}

# Lock an entire table
sub lockTables
{
    my ( $tablesref ) = @_;

    my $list = join ',', @$tablesref;
    my $nolock = 1;
    while ( $nolock ) {
	eval
	{
	    print "Locking tables (this can take awhile)...";
	    &dbexec($dbh, "lock table $list in exclusive mode");
	    $nolock = 0;
	    print "Done.\n";
	};
	if ($@ && $@ =~ /ORA-00060/) {
	    print "Deadlock while trying to obtain lock.  Trying again...\n";
	    sleep 60;
	} elsif ($@) {
	    die "Error while trying to obtain lock:  $@\n";
	}
    }
}

# ask for block to get reactivated
sub expandBlock
{
    my ( $block ) = @_;
    my $now = &mytimeofday ();
    my $end = $now + 3600*24*5;
    
    my $q = &dbexec($dbh, qq{
	insert into t_dps_block_activate (block, time_request, time_until)
	    select id, :time_request, :time_until from t_dps_block b
	    where name  = :block
              and not exists
	      (select 1 from t_dps_block_activate where block = b.id
	          and time_until > :now) },
		 ":block" => $block,
		 ":time_request" => $now,
		 ":time_until" => $end,
		 ":now" => $now);
}

# Delete complete knowledge of a file in TMDB
sub deleteAllTMDBEntries
{
    my ( $lfn, $lfnname, $tables ) = @_;

    my $exists_tracking = 1;
    while ( $exists_tracking )
    {
	# check if there is tracking information for that LFN and wait
	my $q = &dbexec($dbh, qq{
	    select count(*) from t_xfer_task_done xtd
	    join t_xfer_task xt on xt.id = xtd.task
	    where xt.fileid = :lfn},
	    ":lfn" => $lfn);
	$exists_tracking = $q->fetchrow();
	if ( $exists_tracking )
	{
	    print "files are still being harvested, waiting 30s for table to be emptied\n";
	    $dbh->commit();
	    sleep 30;
	}
    }

    print "deleting LFN: $lfnname\n";
    
    foreach my $table ( @$tables )
    {
	if ( $table eq 't_xfer_file' || $table eq 't_dps_file' )
	{
	    &dbexec($dbh, qq{
		delete from $table where id = :lfn},
		    ":lfn" => $lfn);
	}
	else
	{
	    &dbexec($dbh, qq{
		delete from $table where fileid = :lfn},
		    ":lfn" => $lfn);
	}
    }
}


# Delete replica informations for a file at a specified site
sub deleteSiteTMDBEntries
{
    my ( $lfn, $lfnname, $node, $nodename, $tables ) = @_;
    
    print "deleting at node $nodename LFN: $lfnname\n";

    foreach my $table ( @$tables )
    {
	&dbexec($dbh, qq{
	    delete from $table where
		(from_node = :node or to_node = :node) and fileid = :lfn},
		":lfn" => $lfn, ":node" => $node)
	    if ( $table eq 't_xfer_task' || $table eq 't_xfer_path');
	&dbexec($dbh, qq{
	    delete from $table where
		node = :node and fileid = :lfn},
		":lfn" => $lfn, ":node" => $node)
	    if ( $table eq 't_xfer_replica' );
    }
}

# Delete empty blocks and datasets
sub deleteEmptyContainers
{
    my ($datasets, $blocks) = @_;

    $blocks = [] unless $blocks;
    return undef unless $datasets;
    
    my ($del_datasets, $del_blocks) = (0, 0);
    my ($sth, $n);

    unless ($$keep{block}) {
	foreach my $block (@$blocks) {
	    ($sth, $n) = &dbexec($dbh, qq{
		delete from t_dps_block b where b.name = :block
		    and not exists (select 1 from t_dps_file where inblock = b.id) },
				 ":block" => $block);
	    print "deleted empty block $block\n" if $n > 0;
	    $del_blocks += $n;
	}
    } else {
	print "keeping empty blocks\n";
    }

    unless ($$keep{dataset}) {
	foreach my $dataset (@$datasets) {
	    ($sth, $n) = &dbexec($dbh, qq{
		delete from t_dps_dataset ds where ds.name = :dataset
		    and not exists (select 1 from t_dps_block where dataset = ds.id) },
				 ":dataset" => $dataset);
	    print "deleted empty dataset $dataset\n" if $n > 0;
	    $del_datasets += $n;
	}
    } else {
	print "keeping empty datasets\n";
    }

    return ($del_datasets, $del_blocks);
}

sub printStats
{
    my ($stats) = @_;

    print "\nSUMMARY\n";

    # Ugly hack to get final node names and eliminate double names
    my %nodenames = ();
    map {$nodenames{$_} = 0} ( map { keys %{ $$stats{$_} } } qw(SKIPPED DEL_DB) );

    my $fmt = "%-50s %s\n";
    foreach my $node (keys %nodenames )
    {
	printf($fmt, "skipped files at node $node", $$stats{SKIPPED}{$node})
	    if defined $$stats{SKIPPED}{$node};
	printf($fmt, "deleted files at node $node", $$stats{DEL_DB}{$node})
	    if defined $$stats{DEL_DB}{$node};
    }
    printf($fmt, "total files processed", ($$stats{LFNS_PROCESSED} || 0));
    printf($fmt, "total files deleted", ($$stats{DEL_DB_SUM} || 0));
    printf($fmt, "deleted empty blocks", ($$stats{DEL_BLOCKS} || 0));
    printf($fmt, "deleted empty datasets", ($$stats{DEL_DATASETS} || 0));
}

sub escapeSQLLike
{
    return map { $_ =~ s%_%\\_%g; $_; } @_;
}
